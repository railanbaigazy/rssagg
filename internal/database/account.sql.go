// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (id, created_at, updated_at, name, api_key)
    VALUES ($1, $2, $3, $4, 
    encode(sha256(random()::text::bytea), 'hex')
    )
    RETURNING id, created_at, updated_at, name, api_key
`

type CreateAccountParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getAccountByAPIKey = `-- name: GetAccountByAPIKey :one
SELECT id, created_at, updated_at, name, api_key FROM account WHERE api_key=$1
`

func (q *Queries) GetAccountByAPIKey(ctx context.Context, apiKey string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByAPIKey, apiKey)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
